DROP TABLE TIENE;
DROP TABLE REALIZA;
DROP TABLE POSEE;
DROP TABLE NOTA;
DROP TABLE HORARIO;
DROP TABLE ASIGNATURA;
DROP TABLE MATRICULA;
DROP TABLE TIENE_ASIGNADO;
DROP TABLE SE_RESPONSABILIZA_DE;
DROP TABLE TUTOR;
DROP TABLE ALUMNO;
DROP TABLE PROFESOR;
DROP TABLE PERSONA;
DROP TABLE ESPECIALIDAD;

/*--------------------------TABLAS---------------------------------------*/

CREATE TABLE ESPECIALIDAD (
  OID_E             	  INTEGER         PRIMARY KEY     NOT NULL,
  NOMBRE		            VARCHAR2(50)    NOT NULL
);

CREATE TABLE PERSONA (
  OID_P                   INTEGER             PRIMARY KEY,
  DNI                     VARCHAR2(9)         NOT NULL, 
  NOMBRE                  VARCHAR2(50)        NOT NULL,
  FECHA_NACIMIENTO        DATE                NOT NULL,
  TELEFONO                CHAR(9),
  EMAIL                   VARCHAR2(50)
);

CREATE TABLE PROFESOR (
  OID_P             INTEGER       REFERENCES PERSONA ON DELETE CASCADE,
  PRIMARY KEY (OID_P)
);

CREATE TABLE ALUMNO (
  OID_P             INTEGER       REFERENCES PERSONA ON DELETE CASCADE,
  EDAD              INTEGER       NOT NULL,
  PRIMARY KEY (OID_P)
);

CREATE TABLE TUTOR (
  OID_P             INTEGER       REFERENCES PERSONA ON DELETE CASCADE,
  PRIMARY KEY (OID_P)
);

CREATE TABLE SE_RESPONSABILIZA_DE(
  OID_SR            INTEGER       PRIMARY KEY,
  TUTOR             INTEGER       REFERENCES TUTOR(OID_P) ON DELETE CASCADE,
  ALUMNO            INTEGER       REFERENCES ALUMNO(OID_P) ON DELETE CASCADE
);

CREATE TABLE TIENE_ASIGNADO (
  OID_TA            INTEGER        PRIMARY KEY,
  PROFESOR          INTEGER        REFERENCES PROFESOR(OID_P) ON DELETE CASCADE,
  ESPECIALIDAD      INTEGER        REFERENCES ESPECIALIDAD(OID_E) ON DELETE CASCADE 
);

CREATE TABLE MATRICULA (
  OID_M             INTEGER       PRIMARY KEY,
  AÑO               INTEGER       NOT NULL,
  CURSO             VARCHAR2(50)  NOT NULL,
  PRECIO            NUMBER(4,2)   NOT NULL,
  ALUMNO            INTEGER       REFERENCES ALUMNO(OID_P) ON DELETE CASCADE NOT NULL
);

CREATE TABLE ASIGNATURA (
  OID_A             INTEGER       PRIMARY KEY,
  NOMBRE	          VARCHAR2(50)  NOT NULL,
  PROFESOR          INTEGER       REFERENCES PROFESOR(OID_P),
  MATRICULA         INTEGER       REFERENCES MATRICULA(OID_M)ON DELETE CASCADE,
  ESPECIALIDAD      INTEGER       REFERENCES ESPECIALIDAD(OID_E) ON DELETE CASCADE
);

CREATE TABLE HORARIO (
  OID_H             INTEGER       PRIMARY KEY NOT NULL,
  DIA               VARCHAR2(50),
  HORAINICIO        VARCHAR2(50),
  DURACION	        NUMBER(4,2)
);

CREATE TABLE NOTA (
  ALUMNO            INTEGER       REFERENCES ALUMNO(OID_P) ON DELETE CASCADE,
  OID_A             INTEGER       REFERENCES ASIGNATURA ON DELETE CASCADE,
  PRIMARY KEY(ALUMNO, OID_A),
  VALOR             NUMBER(4,2)   NOT NULL,
  CONVOCATORIA	    VARCHAR2(50)  CHECK ( CONVOCATORIA IN ('PRIMERA_CONVOCATORIA','SEGUNDA_CONVOCATORIA','TERCERA_CONVOCATORIA')),	
  PROFESOR          INTEGER       REFERENCES PROFESOR(OID_P)
);

CREATE TABLE POSEE (
  OID_PO            INTEGER       PRIMARY KEY NOT NULL,
  OID_H             INTEGER       REFERENCES HORARIO ON DELETE CASCADE,
  OID_A             INTEGER       REFERENCES ASIGNATURA ON DELETE CASCADE
);

CREATE TABLE REALIZA (
  OID_R		          INTEGER	  PRIMARY KEY NOT NULL,
  ALUMNO	          INTEGER	  REFERENCES ALUMNO(OID_P) ON DELETE CASCADE,
  ASIGNATURA	      INTEGER	  REFERENCES ASIGNATURA(OID_A) ON DELETE CASCADE
);

CREATE TABLE TIENE (
  OID_T		          INTEGER	  PRIMARY KEY NOT NULL,
  ESPECIALIDAD	    INTEGER	  REFERENCES ESPECIALIDAD(OID_E) ON DELETE CASCADE,
  ALUMNO	          INTEGER	  REFERENCES ALUMNO(OID_P) ON DELETE CASCADE
);

/*--------------------SECUENCIAS-----------------------------*/

  DROP SEQUENCE SEC_TUTOR;
  DROP SEQUENCE SEC_TIENE_ASIGNADO;
  DROP SEQUENCE SEC_TIENE;
  DROP SEQUENCE SEC_SE_RESPONSABILIZA_DE;
  DROP SEQUENCE SEC_REALIZA;
  DROP SEQUENCE SEC_PROFESOR;
  DROP SEQUENCE SEC_POSEE;
  DROP SEQUENCE SEC_MATRICULA;
  DROP SEQUENCE SEC_HORARIO;
  DROP SEQUENCE SEC_ESPECIALIDAD;
  DROP SEQUENCE SEC_ASIGNATURA;
  DROP SEQUENCE SEC_ALUMNO;

  CREATE SEQUENCE  SEC_ALUMNO  MINVALUE 1 MAXVALUE 2500 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_ASIGNATURA  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_ESPECIALIDAD  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_HORARIO  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_MATRICULA  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_POSEE  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_PROFESOR  MINVALUE 2501 MAXVALUE 3000 INCREMENT BY 1 START WITH 2501 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_REALIZA  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_SE_RESPONSABILIZA_DE  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_TIENE  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_TIENE_ASIGNADO  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
  CREATE SEQUENCE  SEC_TUTOR  MINVALUE 3001 MAXVALUE 3500 INCREMENT BY 1 START WITH 3001 CACHE 20 NOORDER  NOCYCLE ;
  
/*----------------------------------PROCEDURES--------------------------------*/  

create or replace PROCEDURE INSERTAR_ALUMNO(
  W_DNI               PERSONA.DNI%TYPE,
  W_NOMBRE            PERSONA.NOMBRE%TYPE,
  W_FECHA_NACIMIENTO  PERSONA.FECHA_NACIMIENTO%TYPE,
  W_TELEFONO          PERSONA.TELEFONO%TYPE,
  W_EMAIL             PERSONA.EMAIL%TYPE
) AS      
        edad INTEGER;
        año  DATE;
        sec INTEGER;
BEGIN

  INSERT INTO PERSONA VALUES (SEC_ALUMNO.NEXTVAL,W_DNI,W_NOMBRE,W_FECHA_NACIMIENTO,W_TELEFONO,W_EMAIL);
  sec := SEC_AlUMNO.CURRVAL;
  SELECT FECHA_NACIMIENTO INTO año FROM PERSONA WHERE OID_P = sec;
  SELECT TRUNC(MONTHS_BETWEEN(SYSDATE,AÑO)/12) INTO edad FROM DUAL;
  INSERT INTO ALUMNO VALUES (sec,edad);
  COMMIT WORK;
  
END INSERTAR_ALUMNO;

/

create or replace PROCEDURE INSERTAR_ASIGNATURA(
W_NOMBRE          ASIGNATURA.NOMBRE%TYPE,
W_PROFESOR        ASIGNATURA.PROFESOR%TYPE,
W_MATRICULA       ASIGNATURA.MATRICULA%TYPE,
W_ESPECIALIDAD    ASIGNATURA.ESPECIALIDAD%TYPE
)AS 
BEGIN
  INSERT INTO ASIGNATURA VALUES(SEC_ASIGNATURA.NEXTVAL,W_NOMBRE,W_PROFESOR, W_MATRICULA, W_ESPECIALIDAD);
  COMMIT WORK;
END INSERTAR_ASIGNATURA;

/

create or replace PROCEDURE INSERTAR_ESPECIALIDAD (
  W_NOMBRE        ESPECIALIDAD.NOMBRE%TYPE,
  W_PERSONA       PERSONA.OID_P%TYPE
  )
AS
BEGIN
  IF(W_PERSONA <= 2500 AND W_PERSONA >= 1)
    THEN
  INSERT INTO ESPECIALIDAD VALUES(SEC_ESPECIALIDAD.NEXTVAL,W_NOMBRE);
  INSERT INTO TIENE VALUES(SEC_TIENE.NEXTVAL, SEC_ESPECIALIDAD.CURRVAL, W_PERSONA);
  ELSIF(W_PERSONA <= 3000 AND W_PERSONA >=2501)
    THEN
  INSERT INTO ESPECIALIDAD VALUES(SEC_ESPECIALIDAD.NEXTVAL,W_NOMBRE);
  INSERT INTO TIENE_ASIGNADO VALUES(SEC_TIENE.NEXTVAL, SEC_ESPECIALIDAD.CURRVAL, W_PERSONA);
  
  END IF;

  COMMIT WORK;
END INSERTAR_ESPECIALIDAD;

/

create or replace PROCEDURE INSERTAR_HORARIO(
  W_DIA                 HORARIO.DIA%TYPE,
  W_FECHA               HORARIO.HORAINICIO%TYPE,
  W_DURACION            HORARIO.DURACION%TYPE
  )AS 
  HORA VARCHAR2(50);
BEGIN
  INSERT INTO HORARIO VALUES(SEC_HORARIO.NEXTVAL,W_DIA,W_FECHA,W_DURACION);
  COMMIT WORK;
END INSERTAR_HORARIO;

/

create or replace PROCEDURE INSERTAR_NOTA( 
  W_ALUMNO          NOTA.ALUMNO%TYPE,
  W_OID_A           NOTA.OID_A%TYPE,
  W_VALOR           NOTA.VALOR%TYPE,
  W_CONVOCATORIA    NOTA.CONVOCATORIA%TYPE,
  W_PROFESOR        NOTA.PROFESOR%TYPE

)AS 
BEGIN

  INSERT INTO NOTA VALUES (W_ALUMNO,W_OID_A, W_VALOR,W_CONVOCATORIA,W_PROFESOR);
  COMMIT WORK;

END INSERTAR_NOTA;

/

create or replace PROCEDURE INSERTAR_POSEE (
W_OID_H                 POSEE.OID_H%TYPE,
W_OID_A                 POSEE.OID_A%TYPE)
AS 
BEGIN
  INSERT INTO POSEE VALUES (SEC_POSEE.NEXTVAL,W_OID_H,W_OID_A);
  COMMIT WORK;
END INSERTAR_POSEE;
  
/  
  
create or replace PROCEDURE INSERTAR_PROFESOR(
  W_DNI               PERSONA.DNI%TYPE,
  W_NOMBRE            PERSONA.NOMBRE%TYPE,
  W_FECHA_NACIMIENTO  PERSONA.FECHA_NACIMIENTO%TYPE,
  W_TELEFONO          PERSONA.TELEFONO%TYPE,
  W_EMAIL             PERSONA.EMAIL%TYPE
) AS 
BEGIN
  INSERT INTO PERSONA VALUES (SEC_PROFESOR.NEXTVAL,W_DNI,W_NOMBRE,W_FECHA_NACIMIENTO,W_TELEFONO,W_EMAIL);
  INSERT INTO PROFESOR VALUES (SEC_PROFESOR.CURRVAL);
  COMMIT WORK;
  
END INSERTAR_PROFESOR;

/

create or replace PROCEDURE INSERTAR_REALIZA(
W_OID_P                 REALIZA.ALUMNO%TYPE,
W_OID_A                 REALIZA.ASIGNATURA%TYPE)
AS 
BEGIN
  
  INSERT INTO REALIZA VALUES (SEC_REALIZA.NEXTVAL,W_OID_P,W_OID_A);
  COMMIT WORK;
  
END INSERTAR_REALIZA;

/

create or replace PROCEDURE INSERTAR_SE_RESPONSABILIZA_DE(
W_TUTOR             SE_RESPONSABILIZA_DE.TUTOR%TYPE,
W_ALUMNO            SE_RESPONSABILIZA_DE.ALUMNO%TYPE

)AS 
BEGIN

  INSERT INTO SE_RESPONSABILIZA_DE VALUES (SEC_SE_RESPONSABILIZA_DE.NEXTVAL, W_TUTOR,W_ALUMNO);
  COMMIT WORK;

END INSERTAR_SE_RESPONSABILIZA_DE;

/

create or replace PROCEDURE INSERTAR_TUTOR(
  W_DNI               PERSONA.DNI%TYPE,
  W_NOMBRE            PERSONA.NOMBRE%TYPE,
  W_FECHA_NACIMIENTO  PERSONA.FECHA_NACIMIENTO%TYPE,
  W_TELÉFONO          PERSONA."TELEFONO"%TYPE,
  W_EMAIL             PERSONA.EMAIL%TYPE
) AS 
BEGIN
  INSERT INTO PERSONA VALUES (SEC_TUTOR.NEXTVAL,W_DNI,W_NOMBRE,W_FECHA_NACIMIENTO,W_TELÉFONO,W_EMAIL);
  INSERT INTO TUTOR VALUES (SEC_TUTOR.CURRVAL);
  COMMIT WORK;
  
END INSERTAR_TUTOR;

/

create or replace PROCEDURE INSERTAR_MATRICULA (
W_AÑO               MATRICULA.AÑO%TYPE,
W_CURSO             MATRICULA.CURSO%TYPE,
W_ALUMNO            MATRICULA.ALUMNO%TYPE,
W_NOMBRE            ESPECIALIDAD.NOMBRE%TYPE
)AS 
numIn INTEGER;
seq INTEGER;
BEGIN 
SELECT COUNT(*) INTO numIn FROM TIENE WHERE TIENE.ALUMNO = W_ALUMNO;
IF(W_CURSO = 'MUSICA Y MOVIMIENTO 1')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,30,W_ALUMNO);
      INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vir_2004@hotmail.com');
      INSERTAR_ASIGNATURA('INICIACIÓN MUSICAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, null);
      INSERTAR_HORARIO('LUNES','01/01/2000 16:00:00',2);
      INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  COMMIT WORK;
ELSIF(W_CURSO = 'MUSICA Y MOVIMIENTO 2')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,30,W_ALUMNO);
    INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vir_2004@hotmail.com');
    INSERTAR_ASIGNATURA('INICIACIÓN MUSICAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, null);
    INSERTAR_HORARIO('MARTES','01/01/2000 16:00:00',2);
    INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  COMMIT WORK;
ELSIF(W_CURSO = 'MUSICA Y MOVIMIENTO 3')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,35,W_ALUMNO);
    INSERTAR_ESPECIALIDAD(W_NOMBRE, W_ALUMNO);

   INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vir_2004@hotmail.com');
   INSERTAR_ASIGNATURA('INICIACIÓN MUSICAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
   INSERTAR_HORARIO('MIÉRCOLES','01/01/2000 16:00:00',2.30);
   INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  COMMIT WORK;
ELSIF(W_CURSO = 'PREPARATORIO 1')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,40,W_ALUMNO);
    INSERTAR_ESPECIALIDAD(W_NOMBRE, W_ALUMNO);

  seq:= SEC_MATRICULA.CURRVAL;
  if(numIn >  1)
   THEN UPDATE MATRICULA SET PRECIO=60 WHERE oid_M=seq;
  END IF;
  INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vir_2004@hotmail.com');
  INSERTAR_ASIGNATURA('LENGUAJE MUSICAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('LUNES','01/01/2000 17:00:00',2);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Benito Vega','01/03/1987','685811394','benitoElputas@gmail.com');
  INSERTAR_ASIGNATURA('CORO',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MARTES','01/01/2000 17:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
   
  INSERTAR_PROFESOR('123456789','Amparo Vega Cabrera','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('INSTRUMENTO COLECTIVO',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MIÉRCOLES','01/01/2000 17:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  COMMIT WORK;
ELSIF(W_CURSO = 'PREPARATORIO 2')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,40,W_ALUMNO);
    INSERTAR_ESPECIALIDAD(W_NOMBRE, W_ALUMNO);

   seq:= SEC_MATRICULA.CURRVAL;
  if(numIn >  1)
   THEN UPDATE MATRICULA SET PRECIO=60 WHERE oid_M=seq;
  END IF;
  INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vir_2004@hotmail.com');
  INSERTAR_ASIGNATURA('LENGUAJE MUSICAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('LUNES','01/01/2000 19:00:00',2);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Benito Vega','01/03/1987','685811394','benitoElputas@gmail.com');
  INSERTAR_ASIGNATURA('CORO',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MARTES','01/01/2000 18:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
   
  INSERTAR_PROFESOR('123456789','Amparo Vega Cabrera','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('INSTRUMENTO COLECTIVO',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MIÉRCOLES','01/01/2000 18:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
    
  COMMIT WORK;
ELSIF(W_CURSO = 'PRIMERO ELEMENTAL')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,45,W_ALUMNO);
    INSERTAR_ESPECIALIDAD(W_NOMBRE, W_ALUMNO);

   seq:= SEC_MATRICULA.CURRVAL;
  if(numIn >  1)
   THEN UPDATE MATRICULA SET PRECIO=60 WHERE oid_M=seq;
  END IF;
  INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vir_2004@hotmail.com');
  INSERTAR_ASIGNATURA('LENGUAJE MUSICAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('LUNES','01/01/2000 17:00:00',2);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Benito Vega','01/03/1987','685811394','benitoElputas@gmail.com');
  INSERTAR_ASIGNATURA('CORO',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MARTES','01/01/2000 17:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
   
  INSERTAR_PROFESOR('123456789','Amparo Vega Cabrera','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('INSTRUMENTO INDIVIDUAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MIÉRCOLES','01/01/2000 17:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  COMMIT WORK;
ELSIF(W_CURSO = 'SEGUNDO ELEMENTAL')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,45,W_ALUMNO);
    INSERTAR_ESPECIALIDAD(W_NOMBRE, W_ALUMNO);

    seq:= SEC_MATRICULA.CURRVAL;
  if(numIn >  1)
   THEN UPDATE MATRICULA SET PRECIO=60 WHERE oid_M=seq;
  END IF;
  INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vir_2004@hotmail.com');
  INSERTAR_ASIGNATURA('LENGUAJE MUSICAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('LUNES','01/01/2000 17:00:00',2);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Benito Vega','01/03/1987','685811394','benitoElputas@gmail.com');
  INSERTAR_ASIGNATURA('CORO',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MARTES','01/01/2000 17:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
   
  INSERTAR_PROFESOR('123456789','Amparo Vega Cabrera','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('INSTRUMENTO COLECTIVO',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MIÉRCOLES','01/01/2000 17:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('BANDA',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('VIERNES','01/01/2000 20:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  COMMIT WORK;
 ELSIF(W_CURSO = 'TERCERO ELEMENTAL')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,45,W_ALUMNO);
    INSERTAR_ESPECIALIDAD(W_NOMBRE, W_ALUMNO);

   seq:= SEC_MATRICULA.CURRVAL;
  if(numIn >  1)
   THEN UPDATE MATRICULA SET PRECIO=60 WHERE oid_M=seq;
  END IF;
  INSERTAR_PROFESOR('123456789','Cristina Guzmán','01/03/1987','685811394','vir_2004@hotmail.com');
  INSERTAR_ASIGNATURA('LENGUAJE MUSICAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('LUNES','01/01/2000 17:00:00',2);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Benito Vega','01/03/1987','685811394','benitoElputas@gmail.com');
  INSERTAR_ASIGNATURA('CORO',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MARTES','01/01/2000 17:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
   
  INSERTAR_PROFESOR('123456789','Amparo Vega Cabrera','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('INSTRUMENTO INDIVIDUAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MIÉRCOLES','01/01/2000 17:00:00',0.50);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('BANDA',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('VIERNES','01/01/2000 20:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Carlos Fernández','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('BANDA',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('VIERNES','01/01/2000 20:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  COMMIT WORK;
ELSIF(W_CURSO = 'CUARTO ELEMENTAL')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,45,W_ALUMNO);
    INSERTAR_ESPECIALIDAD(W_NOMBRE, W_ALUMNO);

   seq:= SEC_MATRICULA.CURRVAL;
  if(numIn >  1)
   THEN UPDATE MATRICULA SET PRECIO=60 WHERE oid_M=seq;
  END IF;
  INSERTAR_PROFESOR('123456789','Cristina Guzmán','01/03/1987','685811394','vir_2004@hotmail.com');
  INSERTAR_ASIGNATURA('LENGUAJE MUSICAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('LUNES','01/01/2000 17:00:00',2);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Benito Vega','01/03/1987','685811394','vir_2004@gmail.com');
  INSERTAR_ASIGNATURA('CORO',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MARTES','01/01/2000 17:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
   
  INSERTAR_PROFESOR('123456789','Amparo Vega Cabrera','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('INSTRUMENTO INDIVIDUAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('MIÉRCOLES','01/01/2000 17:00:00',0.75);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('BANDA',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('VIERNES','01/01/2000 20:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Carlos Fernández','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('BANDA',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('VIERNES','01/01/2000 20:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  COMMIT WORK;
ELSIF(W_CURSO = 'ADULTOS')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,45,W_ALUMNO);
    INSERTAR_ESPECIALIDAD(W_NOMBRE, W_ALUMNO);

   seq:= SEC_MATRICULA.CURRVAL;
  if(numIn >  1)
   THEN UPDATE MATRICULA SET PRECIO=60 WHERE oid_M=seq;
  END IF;
  INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('BANDA',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('VIERNES','01/01/2000 20:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Carlos Fernández','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('BANDA',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('VIERNES','01/01/2000 20:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  COMMIT WORK;
ELSIF(W_CURSO = 'SOLO INSTRUMENTO')
  THEN INSERT INTO MATRICULA VALUES(SEC_MATRICULA.NEXTVAL,W_AÑO,W_CURSO,45,W_ALUMNO);
    INSERTAR_ESPECIALIDAD(W_NOMBRE, W_ALUMNO);

  INSERTAR_PROFESOR('123456789','Virginia Pérez','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('LENGUAJE MUSICAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('VIERNES','01/01/2000 20:00:00',1.50);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  
  INSERTAR_PROFESOR('123456789','Carlos Fernández','01/03/1987','685811394','vegamparo@hotmail.com');
  INSERTAR_ASIGNATURA('INSTRUMENTO INDIVIDUAL',SEC_PROFESOR.CURRVAL,SEC_MATRICULA.CURRVAL, SEC_ESPECIALIDAD.CURRVAL);
  INSERTAR_HORARIO('VIERNES','01/01/2000 20:00:00',1);
  INSERTAR_POSEE(SEC_HORARIO.CURRVAL,SEC_ASIGNATURA.CURRVAL);
  COMMIT WORK;
ELSE
  raise_application_error(-20600,'El curso introducido no es correcto');

END IF;



END INSERTAR_MATRICULA;

/

CREATE OR REPLACE PROCEDURE ACTUALIZAR_ALUMNO 
  (w_telefono PERSONA.TELEFONO%TYPE,
  w_email PERSONA.EMAIL%TYPE,
  w_oid_p PERSONA.OID_P%TYPE) AS
  AÑO PERSONA.FECHA_NACIMIENTO%TYPE;
  var_edad ALUMNO.EDAD%TYPE;
  
BEGIN
  SELECT FECHA_NACIMIENTO INTO año FROM PERSONA WHERE oid_p=w_oid_p;
  SELECT TRUNC(MONTHS_BETWEEN(SYSDATE,AÑO)/12) INTO var_edad FROM DUAL;
  UPDATE ALUMNO SET edad=var_edad WHERE oid_p=w_oid_p;
  UPDATE PERSONA SET telefono=w_telefono WHERE oid_p=w_oid_p;
  UPDATE PERSONA SET email=w_email WHERE oid_p=w_oid_p;
  
END ACTUALIZAR_ALUMNO;

/

CREATE OR REPLACE PROCEDURE ACTUALIZAR_PROFESOR
  (w_telefono PERSONA.TELEFONO%TYPE,
  w_email PERSONA.EMAIL%TYPE,
  w_oid_p PERSONA.OID_P%TYPE) AS
BEGIN
  UPDATE PERSONA SET telefono=w_telefono WHERE oid_p=w_oid_p;
  UPDATE PERSONA SET email=w_email WHERE oid_p=w_oid_p;
END ACTUALIZAR_PROFESOR;
/

CREATE OR REPLACE PROCEDURE ACTUALIZAR_TUTOR
  (w_telefono PERSONA.TELEFONO%TYPE,
  w_email PERSONA.EMAIL%TYPE,
  w_oid_p PERSONA.OID_P%TYPE) AS
BEGIN
  UPDATE PERSONA SET telefono=w_telefono WHERE oid_p=w_oid_p;
  UPDATE PERSONA SET email=w_email WHERE oid_p=w_oid_p;
END ACTUALIZAR_TUTOR;
/

CREATE OR REPLACE PROCEDURE ELIMINA_ALUMNO(
  w_oid_p     ALUMNO.OID_P%TYPE)
  AS
  BEGIN
  DELETE FROM TUTOR WHERE EXISTS(SELECT TUTOR FROM SE_RESPONSABILIZA_DE WHERE SE_RESPONSABILIZA_DE.ALUMNO = w_oid_p); 
  DELETE FROM ALUMNO WHERE(OID_P = w_oid_p);
END ELIMINA_ALUMNO;
  
/

CREATE OR REPLACE PROCEDURE ELIMINA_PROFESOR(
  w_oid_p      PROFESOR.OID_P%TYPE)
  AS
  w_oid_a      ASIGNATURA.OID_A%TYPE;
  BEGIN
  SELECT OID_A INTO w_oid_a FROM ASIGNATURA WHERE PROFESOR = w_oid_p;
  ELIMINA_ASIGNATURA(w_oid_a);
  UPDATE NOTA SET PROFESOR=NULL WHERE PROFESOR=w_oid_p;
  DELETE FROM ESPECIALIDAD WHERE EXISTS(SELECT ESPECIALIDAD FROM TIENE_ASIGNADO WHERE TIENE_ASIGNADO.PROFESOR = w_oid_p); 
  DELETE FROM PROFESOR WHERE (OID_P = w_oid_p);
  
END ELIMINA_PROFESOR;

/

CREATE OR REPLACE PROCEDURE ELIMINA_ESPECIALIDAD(
  w_oid_e         ESPECIALIDAD.OID_E%TYPE)
  AS
  BEGIN
    DELETE FROM ESPECIALIDAD WHERE OID_E = w_oid_e;
  END ELIMINA_ESPECIALIDAD;
  
/  

CREATE OR REPLACE PROCEDURE ELIMINA_TUTOR
  (w_oid_p PERSONA.OID_P%TYPE)AS
BEGIN
  DELETE FROM PERSONA WHERE oid_p=w_oid_p;
END ELIMINA_TUTOR;
/

CREATE OR REPLACE PROCEDURE ELIMINA_ASIGNATURA
  (w_oid_a ASIGNATURA.OID_A%TYPE)AS
BEGIN
  DELETE FROM HORARIO WHERE EXISTS
  (SELECT OID_H FROM POSEE WHERE oid_a=w_oid_a);
  DELETE FROM ASIGNATURA WHERE oid_a=w_oid_a;
END ELIMINA_ASIGNATURA;
/

/*--------------------------------------TRIGGERS-----------------------------*/

create or replace TRIGGER EDAD_MUSYMOV
  BEFORE 
  INSERT ON MATRICULA 
  FOR EACH ROW
DECLARE
  alumno INTEGER; 
  edad INTEGER;
BEGIN
  alumno:= :NEW.ALUMNO;
  SELECT EDAD INTO edad FROM ALUMNO WHERE ALUMNO.OID_P = alumno;
  
  IF (edad < 6 AND edad > 2 AND NOT (:NEW.CURSO LIKE 'MUSICA Y MOVIMIENTO%'))
    THEN raise_application_error(-20600, :NEW.CURSO || 'Un alumno entre 3 y 5 años tiene que estar matriculado en MUSICA EN MOVIMIENTO');
  END IF;
  
END EDAD_MUSYMOV;
/

create or replace TRIGGER RESTRICCION_MUSMOV
  BEFORE INSERT ON TIENE
  FOR EACH ROW
DECLARE
  var5 MATRICULA.CURSO%TYPE;
BEGIN
  SELECT MATRICULA.CURSO INTO var5 FROM MATRICULA WHERE MATRICULA.ALUMNO = :NEW.ALUMNO;
  
IF(var5 = 'MUSICA Y MOVIMIENTO 1' OR var5 = 'MUSICA Y MOVIMIENTO 2') THEN
     raise_application_error(-20600,:NEW.ALUMNO||'un alumno no puede tener un instrumento hasta que no curse MÚSICA Y MOVIMIENTO 3');
  END IF;
END RESTRICCION_MUSMOV;
/

CREATE OR REPLACE TRIGGER RESTRICCION_PREP
  BEFORE INSERT ON MATRICULA
  FOR EACH ROW
DECLARE
  edad ALUMNO.EDAD%TYPE;
BEGIN
  SELECT EDAD INTO edad FROM ALUMNO WHERE :NEW.ALUMNO=OID_P;
  IF((edad>5 AND edad<8) AND NOT(:NEW.CURSO LIKE 'CURSO PREPARATORIO%'))
    THEN
    raise_application_error(-20600,'un alumno entre 6 y 7 años solo puede matricularse en CURSO PREPARATORIO');
  END IF;
END RESTRICCION_PREP;
/

create or replace TRIGGER RESTRICCION_ELEMEN
  BEFORE INSERT ON MATRICULA
  FOR EACH ROW
DECLARE
  edad ALUMNO.EDAD%TYPE;
BEGIN
  SELECT EDAD INTO edad FROM ALUMNO WHERE ALUMNO.OID_P=:NEW.ALUMNO;
  IF(:NEW.CURSO LIKE '%ELEMENTAL' AND NOT edad > 7)
    THEN
    raise_application_error(-20600,'solo pueden matricularse en GRADO ELEMENTAL aquellos alumnos con 8 años o más');
  END IF;
END RESTRICCION_ELEMEN;
/

CREATE OR REPLACE TRIGGER RESTRICCION_NUM_INSTRU
  BEFORE INSERT ON TIENE
  FOR EACH ROW
DECLARE
  numero INTEGER;
  edad ALUMNO.EDAD%TYPE;
BEGIN
  SELECT count(*) INTO numero FROM TIENE WHERE :NEW.ALUMNO=TIENE.ALUMNO;
  SELECT EDAD INTO edad FROM ALUMNO WHERE ALUMNO.OID_P=:NEW.ALUMNO;
  IF(numero > 0 AND edad < 8)
    THEN
    raise_application_error(-20600, 'un alumno menor de 7 años de edad no puede tocar más de un instrumento');
  END IF;
END RESTRICCION_NUM_INSTRU;
/

CREATE OR REPLACE TRIGGER RESTRICCION_ELEM_INSTR
  BEFORE INSERT ON MATRICULA
  FOR EACH ROW
DECLARE
  var1_curso MATRICULA.CURSO%TYPE := 'CUARTO ELEMENTAL';
  var2_curso MATRICULA.CURSO%TYPE := 'SOLO INSTRUMENTO';
  cursor c is select curso from matricula where matricula.alumno = :new.alumno;
  EXISTE BOOLEAN  := FALSE;
BEGIN
  IF(:NEW.CURSO = var2_curso) THEN 
  for c1 in c loop
    if(c1.curso=var1_curso)THEN
    EXISTE := TRUE;
  END IF;
  END LOOP;
  IF(EXISTE = FALSE)
  THEN  raise_application_error(-20600,:NEW.ALUMNO||'un alumno no puede matricularse en SOLO INSTRUMENTO hasta que no haya cursado CUARTO ELEMENTAL');
  END IF;
  END IF;
END RESTRICCION_ELEM_INSTR;
/

CREATE OR REPLACE TRIGGER RESTRICCION_EDAD_MATR
  BEFORE INSERT ON ALUMNO
  FOR EACH ROW
BEGIN
  IF(:NEW.EDAD < 3)
  THEN
    raise_application_error(-20600,'No puede matricularse un alumno menor de 3 años');
  END IF;
END RESTRICCION_EDAD_MATR;
/

CREATE OR REPLACE TRIGGER RESTRICCION_EDAD_PROF
  BEFORE INSERT ON PROFESOR
  FOR EACH ROW
DECLARE
  edad INTEGER;
  año DATE;
BEGIN
  SELECT FECHA_NACIMIENTO INTO año FROM PERSONA WHERE :NEW.OID_P=PERSONA.OID_P;
  SELECT TRUNC(MONTHS_BETWEEN(SYSDATE,año)/12) INTO edad FROM DUAL;
  IF(edad < 18)
    THEN
    raise_application_error(-20600,'un profesor debe ser mayor de edad');
  END IF;
END RESTRICCION_EDAD_PROF;
/

CREATE OR REPLACE TRIGGER RESTRICCION_NUM_MATRICULAS
  BEFORE INSERT ON MATRICULA
  FOR EACH ROW
DECLARE
  existe BOOLEAN := FALSE;
  cursor c is select AÑO from MATRICULA where MATRICULA.ALUMNO = :NEW.ALUMNO;
BEGIN
  FOR c1 IN c LOOP
    IF(c1.AÑO = :NEW.AÑO) THEN
      existe := true;
    END IF;
  END LOOP;
  
  IF(EXISTE = TRUE) THEN
    raise_application_error(-20600,:NEW.ALUMNO||'Un alumno no puede tener dos matrículas en el mismo año');
  END IF;
END RESTRICCION_NUM_MATRICULAS;
/

CREATE OR REPLACE TRIGGER RESTRICCION_MATRICULA_HECHA
  BEFORE INSERT ON MATRICULA
  FOR EACH ROW
DECLARE
  existe BOOLEAN := FALSE;
  cursor c is select CURSO from MATRICULA where MATRICULA.ALUMNO = :NEW.ALUMNO;
BEGIN

IF(:NEW.CURSO = 'MUSICA Y MOVIMIENTO 1') THEN
  FOR c1 IN c LOOP
    IF(c1.CURSO = 'MUSICA Y MOVIMIENTO 2' OR c1.CURSO = 'MUSICA Y MOVIMIENTO 3' OR c1.CURSO = 'PREPARATORIO 1'OR
    c1.CURSO = 'PREPARATORIO 2' OR c1.CURSO = 'PRIMERO ELEMENTAL'  OR c1.CURSO = 'SEGUNDO ELEMENTAL'  OR c1.CURSO = 'TERCERO ELEMENTAL' 
     OR c1.CURSO = 'CUARTO ELEMENTAL'  OR c1.CURSO = 'SOLO INSTRUMENTO'  OR c1.CURSO = 'SOLO ADULTOS') THEN
      existe := true;
    END IF;
  END LOOP;
ELSIF (:NEW.CURSO = 'MUSICA Y MOVIMIENTO 2') THEN
FOR c1 IN c LOOP
    IF(c1.CURSO = 'MUSICA Y MOVIMIENTO 3' OR c1.CURSO = 'PREPARATORIO 1'OR
    c1.CURSO = 'PREPARATORIO 2' OR c1.CURSO = 'PRIMERO ELEMENTAL'  OR c1.CURSO = 'SEGUNDO ELEMENTAL'  OR c1.CURSO = 'TERCERO ELEMENTAL' 
     OR c1.CURSO = 'CUARTO ELEMENTAL'  OR c1.CURSO = 'SOLO INSTRUMENTO'  OR c1.CURSO = 'SOLO ADULTOS') THEN
      existe := true;
    END IF;
  END LOOP;
ELSIF (:NEW.CURSO = 'MUSICA Y MOVIMIENTO 3') THEN
FOR c1 IN c LOOP
    IF( c1.CURSO = 'PREPARATORIO 1'OR
    c1.CURSO = 'PREPARATORIO 2' OR c1.CURSO = 'PRIMERO ELEMENTAL'  OR c1.CURSO = 'SEGUNDO ELEMENTAL'  OR c1.CURSO = 'TERCERO ELEMENTAL' 
     OR c1.CURSO = 'CUARTO ELEMENTAL'  OR c1.CURSO = 'SOLO INSTRUMENTO'  OR c1.CURSO = 'SOLO ADULTOS') THEN
      existe := true;
    END IF;
  END LOOP;
ELSIF (:NEW.CURSO = 'PREPARATORIO 1') THEN
FOR c1 IN c LOOP
    IF(
    c1.CURSO = 'PREPARATORIO 2' OR c1.CURSO = 'PRIMERO ELEMENTAL'  OR c1.CURSO = 'SEGUNDO ELEMENTAL'  OR c1.CURSO = 'TERCERO ELEMENTAL' 
     OR c1.CURSO = 'CUARTO ELEMENTAL'  OR c1.CURSO = 'SOLO INSTRUMENTO'  OR c1.CURSO = 'SOLO ADULTOS') THEN
      existe := true;
    END IF;
  END LOOP;
ELSIF (:NEW.CURSO = 'PREPARATORIO 2') THEN
FOR c1 IN c LOOP
    IF( c1.CURSO = 'PRIMERO ELEMENTAL'  OR c1.CURSO = 'SEGUNDO ELEMENTAL'  OR c1.CURSO = 'TERCERO ELEMENTAL' 
     OR c1.CURSO = 'CUARTO ELEMENTAL'  OR c1.CURSO = 'SOLO INSTRUMENTO'  OR c1.CURSO = 'SOLO ADULTOS') THEN
      existe := true;
    END IF;
  END LOOP;
ELSIF (:NEW.CURSO = 'PRIMERO ELEMENTAL') THEN
FOR c1 IN c LOOP
    IF( c1.CURSO = 'SEGUNDO ELEMENTAL'  OR c1.CURSO = 'TERCERO ELEMENTAL' 
     OR c1.CURSO = 'CUARTO ELEMENTAL'  OR c1.CURSO = 'SOLO INSTRUMENTO'  OR c1.CURSO = 'SOLO ADULTOS') THEN
      existe := true;
    END IF;
  END LOOP;
ELSIF (:NEW.CURSO = 'SEGUNDO ELEMENTAL') THEN
FOR c1 IN c LOOP
    IF(c1.CURSO = 'TERCERO ELEMENTAL' OR c1.CURSO = 'CUARTO ELEMENTAL'  OR c1.CURSO = 'SOLO INSTRUMENTO'  OR c1.CURSO = 'SOLO ADULTOS') THEN
      existe := true;
    END IF;
  END LOOP;
ELSIF (:NEW.CURSO = 'TERCERO ELEMENTAL') THEN
FOR c1 IN c LOOP
    IF(c1.CURSO = 'CUARTO ELEMENTAL'  OR c1.CURSO = 'SOLO INSTRUMENTO'  OR c1.CURSO = 'SOLO ADULTOS') THEN
      existe := true;
    END IF;
  END LOOP;
ELSIF (:NEW.CURSO = 'CUARTO ELEMENTAL') THEN
FOR c1 IN c LOOP
    IF(c1.CURSO = 'SOLO INSTRUMENTO'  OR c1.CURSO = 'SOLO ADULTOS') THEN
      existe := true;
    END IF;
  END LOOP;
END IF;
  IF(EXISTE = TRUE) THEN
    raise_application_error(-20600,:NEW.ALUMNO||'El alumno ya ha superado el curso en el que se intenta matricular.');
  END IF;

END RESTRICCION_MATRICULA_HECHA;
/

CREATE OR REPLACE TRIGGER RESTRICCION_MATRICULA_AÑO
  BEFORE INSERT ON MATRICULA
  FOR EACH ROW
DECLARE
  existe BOOLEAN := FALSE;
  cursor c is select año from MATRICULA where MATRICULA.ALUMNO = :NEW.ALUMNO;
BEGIN

FOR c1 IN c LOOP
    IF(c1.año > :new.año) THEN
      existe := true;
    END IF;
  END LOOP;
  IF(EXISTE = TRUE) THEN
    raise_application_error(-20600,:NEW.ALUMNO||'No tienes un DeLorean.');  
  END IF;

END RESTRICCION_MATRICULA_AÑO;
/

CREATE OR REPLACE TRIGGER HORARIOS_PROFESOR
  BEFORE INSERT ON POSEE FOR EACH ROW
DECLARE
  existe BOOLEAN := FALSE;
  cursor c is select oid_h from POSEE where POSEE.OID_A = :NEW.OID_A;
BEGIN

FOR c1 IN c LOOP
    IF(c1.oid_h = :new.oid_h) THEN
      existe := true;
    END IF;
  END LOOP;
 IF(EXISTE = TRUE) THEN
    raise_application_error(-20600,:NEW.oid_h||'Ese profesor ya tiene un horario asignado');  
  END IF;
  
END HORARIOS_PROFESOR;
/

CREATE OR REPLACE TRIGGER DNI_CORRECTO
  BEFORE INSERT ON PERSONA FOR EACH ROW  
DECLARE
  letras_validas CHAR(23) := 'TRWAGMYFPDXBNJZSQVHLCKE';
  loquequiera VARCHAR2(8) := substr(:NEW.DNI, 1, 8);
  var1 INTEGER := TO_NUMBER(loquequiera,'99999999');
  resto INTEGER;
  letra CHAR := substr(:NEW.DNI, 9, 1);
  letra_correcta CHAR;
BEGIN
  resto := var1 mod 23;
  letra_correcta := substr(letras_validas, resto+1, 1);
  IF(letra_correcta <> letra OR length(:NEW.DNI)<>9) THEN
    raise_application_error(-20600, :NEW.DNI || 'El D.N.I. introducido no es correcto');
  END IF;
  
END DNI_CORRECTO;
/

/*--------------------------------------FUNCIONES-----------------------------*/
CREATE OR REPLACE FUNCTION ASSERT_EQUALS(salida BOOLEAN, salida_esperada BOOLEAN)
RETURN VARCHAR2 AS
BEGIN
  IF (salida = salida_esperada) THEN
    return 'EXITO';
  ELSE
    return 'FALLO';
  END IF;
END ASSERT_EQUALS;
/

/*----------------------------------------PAQUETES--------------------------*/
/*------------------------PERSONA------------------------*/
/*
CREATE OR REPLACE PACKAGE PRUEBAS_ALUMNO AS

  PROCEDURE inicializar;
  PROCEDURE insertar
  (nombre_prueba VARCHAR2, 
   w_dni PERSONA.DNI%TYPE, 
   w_nombre PERSONA.NOMBRE%TYPE, 
   w_fechaNac PERSONA.FECHA_NACIMIENTO%TYPE, 
   w_telefono PERSONA.TELEFONO%TYPE,
   w_email PERSONA.EMAIL%TYPE,
   salidaEsperada BOOLEAN);
   
   PROCEDURE actualizar
   (nombre_prueba VARCHAR2,
   w_telefono PERSONA.TELEFONO%TYPE,
   w_email PERSONA.EMAIL%TYPE,
   w_oid_p PERSONA.OID_P%TYPE,
   salidaEsperada BOOLEAN);
   
   PROCEDURE eliminar
   (nombre_prueba VARCHAR2,
   w_oid_p PERSONA.OID_P%TYPE,
   salidaEsperada BOOLEAN);
   
  
   END PRUEBAS_ALUMNO;
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_ALUMNO AS

  PROCEDURE inicializar AS
  BEGIN
    DELETE FROM ALUMNO;
  END inicializar;
    
  PROCEDURE insertar(nombre_prueba VARCHAR2, w_dni PERSONA.DNI%TYPE, w_nombre PERSONA.NOMBRE%TYPE, w_fechaNac PERSONA.FECHA_NACIMIENTO%TYPE, w_telefono PERSONA.TELEFONO%TYPE, w_email PERSONA.EMAIL%TYPE, salidaEsperada BOOLEAN) AS
      salida BOOLEAN := true;
      var1 persona%rowtype;
      w_cod_alum INTEGER;
    BEGIN
      INSERTAR_ALUMNO(w_dni, w_nombre, w_fechaNac, w_telefono, w_email);
      w_cod_alum := sec_alumno.currval;
      SELECT * INTO var1 FROM PERSONA WHERE OID_P=w_cod_alum;
      IF (var1.DNI<>w_dni OR var1.NOMBRE<>w_nombre OR var1.FECHA_NACIMIENTO<> w_fechaNac OR var1.TELEFONO<>w_telefono OR var1.EMAIL<>w_email) THEN
        salida := false;
      END IF;
      COMMIT WORK;
      
      DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
      
      EXCEPTION
      WHEN OTHERS THEN
            DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
            ROLLBACK;
      END insertar;
      
  PROCEDURE actualizar (nombre_prueba VARCHAR2,
   w_telefono PERSONA.TELEFONO%TYPE,
   w_email PERSONA.EMAIL%TYPE,
   w_oid_p PERSONA.OID_P%TYPE,
   salidaEsperada BOOLEAN) AS
    salida BOOLEAN := true;
    var1 PERSONA%ROWTYPE;
    w_cod_alum INTEGER;
    BEGIN
      ACTUALIZAR_ALUMNO(w_telefono, w_email,w_oid_p);
      w_cod_alum := SEC_ALUMNO.currval;
      SELECT * INTO var1 FROM PERSONA WHERE OID_P=w_cod_alum;
      IF(var1.TELEFONO<>w_telefono OR var1.EMAIL<>w_email)
        THEN salida:=false;
      END IF;
      COMMIT WORK;
      
      DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida,salidaEsperada));
      
      EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false,salidaEsperada));
        ROLLBACK;
  END actualizar;
  
  PROCEDURE eliminar
   (nombre_prueba VARCHAR2,
   w_oid_p PERSONA.OID_P%TYPE,
   salidaEsperada BOOLEAN) AS
    salida BOOLEAN := true;
    n_alumnos INTEGER;
    n_tutores INTEGER;
    
    BEGIN
    ELIMINA_ALUMNO(w_oid_p);
    SELECT COUNT(*) INTO n_tutores FROM ALUMNO NATURAL JOIN SE_RESPONSABILIZA_DE NATURAL JOIN TUTOR  WHERE OID_P = w_oid_p;
    SELECT COUNT(*) INTO n_alumnos FROM ALUMNO WHERE oid_p=w_oid_p;
    IF(n_alumnos<>0 OR n_tutores<>0)
      THEN 
      salida:=false;
    END IF;
    COMMIT WORK;
    
    DBMS_OUTPUT.put_line(nombre_prueba || ': ' ||ASSERT_EQUALS(salida,salidaEsperada));
    
    EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.put_line(nombre_prueba || ': '||ASSERT_EQUALS(salida,salidaEsperada));
      ROLLBACK;
    END eliminar;
    
    
      
END PRUEBAS_ALUMNO;


/

/*------------------------PROFESOR-----------------------*/
/*
CREATE OR REPLACE PACKAGE PRUEBAS_PROFESOR AS

  PROCEDURE inicializar;
  PROCEDURE insertar 
  (nombre_prueba VARCHAR2, 
   w_dni PERSONA.DNI%TYPE, 
   w_nombre PERSONA.NOMBRE%TYPE, 
   w_fechaNac PERSONA.FECHA_NACIMIENTO%TYPE, 
   w_telefono PERSONA.TELEFONO%TYPE,
   w_email PERSONA.EMAIL%TYPE,
   salidaEsperada BOOLEAN);
  PROCEDURE eliminar(nombre_prueba VARCHAR2,
   w_oid_p PERSONA.OID_P%TYPE,
   salidaEsperada BOOLEAN);
   
   PROCEDURE actualizar (nombre_prueba VARCHAR2,
   w_telefono PERSONA.TELEFONO%TYPE,
   w_email PERSONA.EMAIL%TYPE,
   w_oid_p PERSONA.OID_P%TYPE,
   salidaEsperada BOOLEAN);
   END PRUEBAS_PROFESOR;
/
  
CREATE OR REPLACE PACKAGE BODY PRUEBAS_PROFESOR AS

  PROCEDURE inicializar AS
  BEGIN
    DELETE FROM PROFESOR;
  END inicializar;
  
 PROCEDURE insertar(nombre_prueba VARCHAR2, w_dni PERSONA.DNI%TYPE, w_nombre PERSONA.NOMBRE%TYPE, w_fechaNac PERSONA.FECHA_NACIMIENTO%TYPE, w_telefono PERSONA.TELEFONO%TYPE, w_email PERSONA.EMAIL%TYPE, salidaEsperada BOOLEAN) AS
      salida BOOLEAN := true;
      var1 persona%rowtype;
      w_cod_prof INTEGER;
    BEGIN
      INSERTAR_PROFESOR(w_dni, w_nombre, w_fechaNac, w_telefono, w_email);
      w_cod_prof := sec_profesor.currval;
      SELECT * INTO var1 FROM PERSONA WHERE OID_P = w_cod_prof;
      IF (var1.dni<>w_dni) THEN
        salida := false;
      END IF;
      COMMIT WORK;
      
      DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
      
      EXCEPTION
      WHEN OTHERS THEN
            DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
            ROLLBACK;
      END insertar; 
   
    PROCEDURE eliminar (nombre_prueba VARCHAR2,
   w_oid_p PERSONA.OID_P%TYPE,
   salidaEsperada BOOLEAN) AS
    salida BOOLEAN := true;
    n_asignaturas INTEGER;
    n_especialidad INTEGER;
    
    BEGIN
    ELIMINA_PROFESOR(w_oid_p);
    SELECT COUNT(*) INTO n_asignaturas FROM PROFESOR NATURAL JOIN ASIGNATURA;
    SELECT COUNT(*) INTO n_especialidad FROM PROFESOR NATURAL JOIN TIENE_ASIGNADO NATURAL JOIN ESPECIALIDAD WHERE oid_p=w_oid_p;
    IF(n_asignaturas<>0 OR n_especialidad<>0)
      THEN 
      salida:=false;
    END IF;
    COMMIT WORK;
    
    DBMS_OUTPUT.put_line(nombre_prueba || ': ' ||ASSERT_EQUALS(salida,salidaEsperada));
    
    EXCEPTION
    WHEN OTHERS THEN
      DBMS_OUTPUT.put_line(nombre_prueba || ': '||ASSERT_EQUALS(salida,salidaEsperada));
      ROLLBACK;
    END eliminar;
    
     PROCEDURE actualizar (nombre_prueba VARCHAR2,
   w_telefono PERSONA.TELEFONO%TYPE,
   w_email PERSONA.EMAIL%TYPE,
   w_oid_p PERSONA.OID_P%TYPE,
   salidaEsperada BOOLEAN) AS
    salida BOOLEAN := true;
    var1 PERSONA%ROWTYPE;
    w_cod_prof INTEGER;
    BEGIN
      ACTUALIZAR_PROFESOR(w_telefono, w_email,w_oid_p);
      w_cod_prof := SEC_PROFESOR.currval;
      SELECT * INTO var1 FROM PERSONA WHERE OID_P=w_cod_prof;
      IF(var1.TELEFONO<>w_telefono OR var1.EMAIL<>w_email)
        THEN salida:=false;
      END IF;
      COMMIT WORK;
      
      DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida,salidaEsperada));
      
      EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false,salidaEsperada));
        ROLLBACK;
  END actualizar;
     
END PRUEBAS_PROFESOR;

/
     
/*-------------------------TUTOR--------------------------*/     
/*
CREATE OR REPLACE PACKAGE PRUEBAS_TUTOR AS

  PROCEDURE inicializar;
  PROCEDURE insertar
   (nombre_prueba VARCHAR2, 
   w_dni PERSONA.DNI%TYPE, 
   w_nombre PERSONA.NOMBRE%TYPE, 
   w_fechaNac PERSONA.FECHA_NACIMIENTO%TYPE, 
   w_telefono PERSONA.TELEFONO%TYPE,
   w_email PERSONA.EMAIL%TYPE,
   salidaEsperada BOOLEAN);
  
  END PRUEBAS_TUTOR; 
  
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_TUTOR AS

  PROCEDURE inicializar AS
  BEGIN
    DELETE FROM TUTOR;
  END inicializar;
  
  PROCEDURE insertar(nombre_prueba VARCHAR2, w_dni PERSONA.DNI%TYPE, w_nombre PERSONA.NOMBRE%TYPE, w_fechaNac PERSONA.FECHA_NACIMIENTO%TYPE, w_telefono PERSONA.TELEFONO%TYPE, w_email PERSONA.EMAIL%TYPE, salidaEsperada BOOLEAN) AS
      salida BOOLEAN := true;
      var1 persona%rowtype;
      w_cod_tut INTEGER;
    BEGIN
      INSERTAR_TUTOR(w_dni, w_nombre, w_fechaNac, w_telefono, w_email);
      w_cod_tut := sec_tutor.currval;
      SELECT * INTO var1 FROM PERSONA WHERE OID_P = w_cod_tut;
      IF (var1.dni<>w_dni) THEN
        salida := false;
      END IF;
      COMMIT WORK;
      
      DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
      
      EXCEPTION
      WHEN OTHERS THEN
            DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
            ROLLBACK;
      END insertar; 
      
END PRUEBAS_TUTOR;

/

/*-------------------------MATRICULA-----------------------*/
/*
CREATE OR REPLACE PACKAGE PRUEBAS_MATRICULA AS

  PROCEDURE inicializar;
  PROCEDURE insertar
  (nombre_prueba   VARCHAR2,
  w_año            MATRICULA.AÑO%TYPE,
  w_curso          MATRICULA.CURSO%TYPE,
  w_alumno         MATRICULA.ALUMNO%TYPE,
  salidaEsperada   BOOLEAN);
  
  END PRUEBAS_MATRICULA;
  
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_MATRICULA AS
  
  PROCEDURE inicializar AS
  BEGIN
    DELETE FROM MATRICULA;
  END inicializar;
  
  PROCEDURE insertar(nombre_prueba VARCHAR2, w_año MATRICULA.AÑO%TYPE, w_curso MATRICULA.CURSO%TYPE, w_alumno MATRICULA.ALUMNO%TYPE, salidaEsperada BOOLEAN) AS
    salida BOOLEAN := true;
    var1 matricula%rowtype;
    w_cod_matr INTEGER;
  BEGIN
    INSERTAR_MATRICULA(w_año, w_curso, w_alumno);
    w_cod_matr := sec_matricula.currval;
    SELECT * INTO var1 FROM MATRICULA WHERE OID_M = w_cod_matr;
    IF(var1.curso <> w_curso OR var1.año<> w_año OR var1.alumno<>w_alumno) THEN
      salida := false;
    END IF;
  COMMIT WORK;
  
  DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
    
  EXCEPTION
  WHEN OTHERS THEN
     DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
     ROLLBACK;
  END insertar; 
  
END PRUEBAS_MATRICULA;

/

/*----------------------ASIGNATURA-------------------*/
/*
CREATE OR REPLACE PACKAGE PRUEBAS_ASIGNATURA AS

  PROCEDURE inicializar;
  PROCEDURE insertar
  (nombre_prueba VARCHAR2,
  w_nombre        ASIGNATURA.NOMBRE%TYPE,
  w_profesor      ASIGNATURA.PROFESOR%TYPE,
  w_matricula     ASIGNATURA.MATRICULA%TYPE,
  salidaEsperada  BOOLEAN);

END PRUEBAS_ASIGNATURA;

/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_ASIGNATURA AS

  PROCEDURE inicializar AS
  BEGIN
    DELETE FROM ASIGNATURA;
  END inicializar;
  
  PROCEDURE insertar(nombre_prueba VARCHAR2, w_nombre ASIGNATURA.NOMBRE%TYPE, w_profesor ASIGNATURA.PROFESOR%TYPE, w_matricula ASIGNATURA.MATRICULA%TYPE, salidaEsperada BOOLEAN) AS
    salida BOOLEAN := true;
    var1 asignatura%rowtype;
    w_cod_asig INTEGER;
  BEGIN
    INSERTAR_ASIGNATURA(w_nombre, w_profesor, w_matricula);
    w_cod_asig := sec_asignatura.currval;
    SELECT * INTO var1 FROM ASIGNATURA WHERE OID_A = w_cod_asig;
    IF(var1.profesor<>w_profesor OR var1.matricula<>w_matricula) THEN
         salida := false;
    END IF;
  COMMIT WORK;
  
  DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
    
  EXCEPTION
  WHEN OTHERS THEN
     DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
     ROLLBACK;
  END insertar; 
  
END PRUEBAS_ASIGNATURA;  

/
/*
CREATE OR REPLACE PACKAGE PRUEBAS_ESPECIALIDAD AS

  PROCEDURE inicializar;
  PROCEDURE insertar
  (nombre_prueba   VARCHAR2,
  w_nombre         ESPECIALIDAD.NOMBRE%TYPE,
  salidaEsperada   BOOLEAN);
  
END PRUEBAS_ESPECIALIDAD;

/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_ESPECIALIDAD AS
  
    PROCEDURE inicializar AS
    BEGIN
      DELETE FROM ESPECIALIDAD;
    END inicializar;
    
    PROCEDURE insertar(nombre_prueba VARCHAR2, w_nombre ESPECIALIDAD.NOMBRE%TYPE, salidaEsperada BOOLEAN) AS
      salida BOOLEAN := true;
      var1 especialidad%rowtype;
      w_cod_espe INTEGER;
    BEGIN
      INSERTAR_ESPECIALIDAD(w_nombre);
      w_cod_espe := sec_especialidad.currval;
      SELECT * INTO var1 FROM ESPECIALIDAD WHERE OID_E = w_cod_espe;
      IF(var1.nombre<>w_nombre) THEN
        salida := false;
      END IF;
      COMMIT WORK;
      
       DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
    
      EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
         ROLLBACK;
      END insertar; 
 END PRUEBAS_ESPECIALIDAD;
  
/
*/
/*-------------------------------HORARIO-----------------------------*/
/*
CREATE OR REPLACE PACKAGE PRUEBAS_HORARIO AS

  PROCEDURE inicializar;
  PROCEDURE insertar
  (nombre_prueba    VARCHAR2,
  w_dia             HORARIO.DIA%TYPE,
  w_fecha           HORARIO.HORAINICIO%TYPE,
  w_duracion        HORARIO.DURACION%TYPE,
  salidaEsperada    BOOLEAN);

END PRUEBAS_HORARIO;

/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_HORARIO AS

  PROCEDURE inicializar AS
  BEGIN
    DELETE FROM HORARIO;
  END inicializar;
  
  PROCEDURE insertar(nombre_prueba VARCHAR2, w_dia HORARIO.DIA%TYPE, w_fecha HORARIO.HORAINICIO%TYPE, w_duracion HORARIO.DURACION%TYPE, salidaEsperada BOOLEAN) AS         
    salida BOOLEAN := true;
    var1 horario%rowtype;
    w_cod_hor INTEGER;
  BEGIN
    INSERTAR_HORARIO(w_dia, w_fecha, w_duracion);
    w_cod_hor := sec_horario.currval;
    SELECT * INTO var1 FROM HORARIO WHERE OID_H = w_cod_hor;
    IF(var1.dia<>w_dia OR var1.horainicio<>w_fecha OR var1.duracion<>w_duracion) THEN
         salida := false;
    END IF;
  COMMIT WORK;
  
  DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
    
  EXCEPTION
  WHEN OTHERS THEN
     DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
     ROLLBACK;
     
  END insertar; 
  
END PRUEBAS_HORARIO;  

/

/*-------------------------------NOTA-----------------------------*/
/*
CREATE OR REPLACE PACKAGE PRUEBAS_NOTA AS

  PROCEDURE inicializar;
  PROCEDURE insertar
  (nombre_prueba    VARCHAR2,
  w_alumno         NOTA.ALUMNO%TYPE,
  w_oid_a           NOTA.OID_A%TYPE,
  w_valor           NOTA.VALOR%TYPE,
  w_convocatoria    NOTA.CONVOCATORIA%TYPE,
  w_profesor        NOTA.PROFESOR%TYPE,
  salidaEsperada    BOOLEAN);
  
  END PRUEBAS_NOTA;
  
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_NOTA AS
  
  PROCEDURE inicializar AS
  BEGIN
    DELETE FROM NOTA;
  END inicializar;
  
  PROCEDURE insertar(nombre_prueba VARCHAR2, w_alumno NOTA.ALUMNO%TYPE, w_oid_a NOTA.OID_A%TYPE, w_valor NOTA.VALOR%TYPE, w_convocatoria NOTA.CONVOCATORIA%TYPE, w_profesor NOTA.PROFESOR%TYPE,  salidaEsperada BOOLEAN) AS
      salida BOOLEAN := true;
    var1 nota%rowtype;
    w_cod_alum INTEGER;
    w_cod_asig INTEGER;
  BEGIN
    INSERTAR_NOTA(w_alumno, w_oid_a, w_valor, w_convocatoria, w_profesor);
    w_cod_alum := sec_alumno.currval;
    w_cod_asig := sec_asignatura.currval;
    SELECT * INTO var1 FROM NOTA WHERE (ALUMNO = w_cod_alum AND OID_A = w_cod_asig);
    IF(var1.alumno <> w_alumno OR var1.valor<> w_valor OR var1.convocatoria<>w_convocatoria OR var1.OID_A<>w_oid_A OR var1.profesor<>w_profesor) THEN
      salida := false;
    END IF;
  COMMIT WORK;
  
  DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
    
  EXCEPTION
  WHEN OTHERS THEN
     DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
     ROLLBACK;
  END insertar; 
  
END PRUEBAS_NOTA;

/

/*-------------------------------POSEE-----------------------------*/
/*
CREATE OR REPLACE PACKAGE PRUEBAS_POSEE AS
  PROCEDURE inicializar;
  PROCEDURE insertar
  (nombre_prueba VARCHAR2,
  w_oid_h        POSEE.OID_H%TYPE,
  w_oid_a        POSEE.OID_A%TYPE,
  salidaEsperada BOOLEAN);

END PRUEBAS_POSEE;

/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_POSEE AS

  PROCEDURE inicializar AS
  BEGIN
    DELETE FROM POSEE;
  END inicializar;
  
  PROCEDURE insertar(nombre_prueba VARCHAR2, w_oid_h POSEE.OID_H%TYPE, w_oid_a POSEE.OID_A%TYPE, salidaEsperada BOOLEAN) AS
    salida BOOLEAN := true;
  BEGIN
    INSERTAR_POSEE(w_oid_h, w_oid_a);
    IF(w_oid_h = NULL OR w_oid_a = NULL) THEN
         salida := false;
    END IF;
  COMMIT WORK;
  
  DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
    
  EXCEPTION
  WHEN OTHERS THEN
     DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
     ROLLBACK;
  END insertar; 
  
END PRUEBAS_POSEE;  

/

/*-------------------------------REALIZA-----------------------------*/
/*
CREATE OR REPLACE PACKAGE PRUEBAS_REALIZA AS
  PROCEDURE inicializar;
  PROCEDURE insertar
  (nombre_prueba VARCHAR2,
  w_oid_a        REALIZA.ALUMNO%TYPE,
  w_oid_as       REALIZA.ASIGNATURA%TYPE,
  salidaEsperada BOOLEAN);
  
END PRUEBAS_REALIZA;

/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_REALIZA AS
  PROCEDURE inicializar AS
  BEGIN
    DELETE FROM REALIZA;
  END inicializar;
  
  PROCEDURE insertar(nombre_prueba VARCHAR2, w_oid_a REALIZA.ALUMNO%TYPE, w_oid_as REALIZA.ASIGNATURA%TYPE, salidaEsperada BOOLEAN) AS
    salida BOOLEAN := true;
  BEGIN
    INSERTAR_POSEE(w_oid_a, w_oid_as);
    IF(w_oid_a = NULL OR w_oid_as = NULL) THEN
         salida := false;
    END IF;
  COMMIT WORK;
  
  DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
    
  EXCEPTION
  WHEN OTHERS THEN
     DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
     ROLLBACK;
  END insertar; 
  
END PRUEBAS_REALIZA;  

/

/*-------------------------------SE RESPONSABILIZA DE-----------------------------*/
/*
CREATE OR REPLACE PACKAGE PRUEBAS_SE_RESPONSABILIZA_DE AS
  PROCEDURE inicializar;
  PROCEDURE insertar
  (nombre_prueba VARCHAR2,
  w_oid_t        SE_RESPONSABILIZA_DE.TUTOR%TYPE,
  w_oid_a        SE_RESPONSABILIZA_DE.ALUMNO%TYPE,
  salidaEsperada BOOLEAN);
  
END PRUEBAS_SE_RESPONSABILIZA_DE;

/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_SE_RESPONSABILIZA_DE AS
  PROCEDURE inicializar AS
  BEGIN
    DELETE FROM SE_RESPONSABILIZA_DE;
  END inicializar;
  
  PROCEDURE insertar(nombre_prueba VARCHAR2, w_oid_t SE_RESPONSABILIZA_DE.TUTOR%TYPE, w_oid_a SE_RESPONSABILIZA_DE.ALUMNO%TYPE, salidaEsperada BOOLEAN) AS
    salida BOOLEAN := true;
  BEGIN
    INSERTAR_SE_RESPONSABILIZA_DE(w_oid_t, w_oid_a);
    IF(w_oid_t = NULL OR w_oid_a = NULL) THEN
         salida := false;
    END IF;
  COMMIT WORK;
  
  DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(salida, salidaEsperada));
    
  EXCEPTION
  WHEN OTHERS THEN
     DBMS_OUTPUT.put_line(nombre_prueba || ': ' || ASSERT_EQUALS(false, salidaEsperada));
     ROLLBACK;
  END insertar; 
  
END PRUEBAS_SE_RESPONSABILIZA_DE;  

/

/*---------------------------------------------------------*/

/*
SET SERVEROUTPUT ON;
DECLARE
BEGIN

  PRUEBAS_ALUMNO.inicializar;
  PRUEBAS_ALUMNO.INSERTAR('Prueba 1 - Inserción Alumno', '48992413K', 'Jose Daniel','05/05/1996', 680798879, 'josopu96@gmail.com', true);
  PRUEBAS_ALUMNO.INSERTAR('Prueba 2 - DNI NULL', NULL, 'Jose Daniel','05/05/1996', 680798879, 'josopu96@gmail.com', false);
  PRUEBAS_ALUMNO.INSERTAR('Prueba 3 - NOMBRE NULL', '48992413K', NULL,'05/05/1996', 680798879, 'josopu96@gmail.com', false);
  PRUEBAS_ALUMNO.INSERTAR('Prueba 4 - FECHA DE NACIMIENTO NULL','48992413K', 'Jose Daniel',NULL, 680798879, 'josopu96@gmail.com', false);

  PRUEBAS_PROFESOR.inicializar;
  PRUEBAS_PROFESOR.INSERTAR('Prueba 1 - Inserción Profesor', '75471390H', 'José Solano','24/04/1946', 680798879, 'josopu96@gmail.com', true);
  PRUEBAS_PROFESOR.INSERTAR('Prueba 2 - DNI NULL', NULL,  'José Solano','24/04/1946', 680798879, 'josopu96@gmail.com', false);
  PRUEBAS_PROFESOR.INSERTAR('Prueba 3 - NOMBRE NULL', '75471390H',  NULL,'24/04/1946', 680798879, 'josopu96@gmail.com', false);
  PRUEBAS_PROFESOR.INSERTAR('Prueba 4 - FECHA DE NACIMIENTO NULL', '75471390H', 'José Solano',NULL, 680798879, 'josopu96@gmail.com', false);

  PRUEBAS_TUTOR.inicializar;
  PRUEBAS_TUTOR.INSERTAR('Prueba 1 - Inserción Tutor','28878883Z','IRENE','26/02/1976',680798879, null, true);
  PRUEBAS_TUTOR.INSERTAR('Prueba 2 - DNI NULL', NULL,'IRENE','26/02/1976',680798879, null, false);
  PRUEBAS_TUTOR.INSERTAR('Prueba 3 - NOMBRE NULL', '28878883Z',NULL,'26/02/1976',680798879, null, false);
  PRUEBAS_TUTOR.INSERTAR('Prueba 4 - FECHA DE NACIMIENTO NULL', '28878883Z','IRENE',NULL,680798879, null, false);
  
  
  PRUEBAS_MATRICULA.inicializar;
  PRUEBAS_MATRICULA.INSERTAR('Prueba 1 - Inserción Matrícula', 2010, 'TERCERO ELEMENTAL', 1, true);
  PRUEBAS_MATRICULA.INSERTAR('Prueba 2 - AÑO NULL', NULL, 'MUSICA Y MOVIMIENTO', 1, false);
  PRUEBAS_MATRICULA.INSERTAR('Prueba 3 - CURSO NULL', 1990, NULL, 1, false);
  PRUEBAS_MATRICULA.INSERTAR('Prueba 4 - ALUMNO NULL', 1990, 'MUSICA Y MOVIMIENTO',null, false);

  PRUEBAS_ASIGNATURA.inicializar;
  PRUEBAS_ASIGNATURA.INSERTAR('Prueba 1 - Inserción Asignatura','FP',2501,1, true);
END;

*/
